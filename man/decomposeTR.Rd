% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/decomposeTR.R
\name{decomposeTR}
\alias{decomposeTR}
\title{Tandem Repeat Decomposition}
\usage{
decomposeTR(allele, motifs, match = 1, indel = -1, allowence = 0)
}
\arguments{
\item{allele}{DNAString or character string of the Tandem repeat}

\item{motifs}{a vector of strings or a DNAStringSet that are the expected
motifs of the Tandem Repeat}

\item{match}{score for if motif matches sequence this is by default 1}

\item{indel}{score for if there is an insertion or deletion in sequence by
default this is -1}

\item{allowence}{is the number of mismatches between the motif
and the sequence permitted to be still be later encoded as a motif. By
default this is 0}
}
\value{
This function returns the tandem repeat allele decomposed into its
motifs as a character vector. For example, the allele \code{"ATATAT"} with motif
\code{"AT"} is decomposed into \code{c("AT", "AT", "AT")} as well as an updated motifs
DNAStringSet consisting of novel motifs detected in the allele.

If no motifs are found in the allele from the initial motif set,
the function returns \code{character(0)}and prints a message to inform the user.
}
\description{
A function that decomposes an allele into the supplied motifs given either a
character string or DNAString of the allele
}
\examples{
\dontrun{
##Example 1

library(Biostrings)
allele <- DNAString("TTTACACGTAC")
motifs <- DNAStringSet(c("AC", "GT"))
composition <- decomposeTR(allele, motifs)
composition

###Expected:
$composition
[1] "TTT" "AC"  "AC"  "GT"  "AC"

$motifs
DNAStringSet object of length 3:
  width seq
[1]     2 AC
[2]     2 GT
[3]     3 TTT
}

\dontrun{
##Example 2

allele <- DNAString("TTTACACGTCAC")
motifs <- DNAStringSet(c("AC", "GTC"))
composition <- decomposeTR(allele, motifs)
composition

###Expected
$composition
[1] "TTT" "AC"  "GTC" "AC"
$motifs
DNAStringSet object of length 3:
  width seq
[1]     2 AC
[2]     3 GTC
[3]     3 TTT
}
}
\references{
OpenAI. ChatGPT (GPT-5) large language model (2025).
https://chat.openai.com/

PagÃ¨s, H., Aboyoun, P., Gentleman, R. & DebRoy, S. Biostrings: Efficient
manipulation of biological strings (R package version 2.77.2, 2025).
https://bioconductor.org/packages/Biostrings, doi:10.18129/B9.bioc.Biostrings

Park, J., Kaufman, E., Valdmanis, P. N. & Bafna, V. TRviz: A Python Library
for decomposing and Visualizing Tandem Repeat Sequences. Bioinformatics
Advances 3, (2023).
}
